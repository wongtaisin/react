@mixin px2px($name, $px,$important:null){
        // #{$name}: $px * 1px;
        #{$name}: round($px / 2) * 1px $important; /*no*/
        [data-dpr="2"] & {
            #{$name}: $px*1px $important; /*no*/
        }
        // for mx3
        [data-dpr="2.5"] & {
            #{$name}: round($px * 2.5 / 2) * 1px $important; /*no*/
        }
        // for 小米note
        [data-dpr="2.75"] & {
            #{$name}: round($px * 2.75 / 2) * 1px $important; /*no*/
        }
        [data-dpr="3"] & {
            #{$name}: round($px / 2 * 3) * 1px $important; /*no*/
        }
        // for 三星note4
        [data-dpr="4"] & {
            #{$name}: $px * 2px $important;/*no*/
        }
}

/*
首先，目前视觉稿大小为640，750以及，1125这三种。
1a = 7.5px
1rem = 75px
因此，对于视觉稿上的元素的尺寸换算，只需要原始px值除以rem基准px值即可。例如240px * 120px的元素，最后转换为3.2rem * 1.6rem。
*/
@mixin px2rem($name, $px){
    #{$name}: $px / 64 * 1rem;
}

@mixin font-dpr($font-size){
    font-size: $font-size;
    [data-dpr="2"] & {
        font-size: $font-size * 2;
    }
    [data-dpr="3"] & {
        font-size: $font-size * 3;
    }
}

@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

@mixin transition($args...) {
    -webkit-transition: $args;
       -moz-transition: $args;
        -ms-transition: $args;
         -o-transition: $args;
            transition: $args;
}

@mixin transform($args...) {
    -webkit-transform: $args;
       -moz-transform: $args;
        -ms-transform: $args;
         -o-transform: $args;
            transform: $args;
}

@mixin animation($args...) {
    -webkit-animation: $args;
       -moz-animation: $args;
        -ms-animation: $args;
         -o-animation: $args;
            animation: $args;
}

@mixin animation($args...) {
    -webkit-animation: $args;
       -moz-animation: $args;
        -ms-animation: $args;
         -o-animation: $args;
            animation: $args;
}


/**
|private mySprite
|
*/
@mixin sprite-position-t($sprite) {
    $spritesheet-w: nth($sprite, 7) - nth($sprite, 5);
    $spritesheet-h: nth($sprite, 8) - nth($sprite, 6);
    $sprite-offset-x-t: nth($sprite, 1) / $spritesheet-w * 100%;
    $sprite-offset-y-t: nth($sprite, 2) / $spritesheet-h * 100%;
    background-position: $sprite-offset-x-t  $sprite-offset-y-t;
}
@mixin sprite-size($sprite) {
  background-size: nth($sprite, 7) nth($sprite, 8);
}

@mixin sprite-t($sprite) {
  @include sprite-image($sprite);
  @include sprite-position-t($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
  @include sprite-size($sprite);
}
@mixin mySprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite-t($sprite);
    }
  }
}

@mixin textNowrap($width){
    width: $width * 1px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

@mixin circleImg($R){
    .img{
        width: $R * 1px;
        height: $R * 1px;
        border-radius: $R * 1px;
        overflow: hidden;
        display: inline-block;
        vertical-align: middle;
        border: 1px solid #eee;
        img{
            width: $R*1px;
        }
    }
}


/* 箭头
arrow(direction,
size,
color);
*/
@mixin arrow($direction,
$size,
$color) {
    width: 0;
    height: 0;
    line-height: 0;
    font-size: 0;
    overflow: hidden;
    border-width: $size;
    cursor: pointer;
    @if $direction == top {
        border-style: dashed dashed solid dashed;
        border-color: transparent transparent $color transparent;
        border-top: none;
    }
    @else if $direction == bottom {
        border-style: solid dashed dashed dashed;
        border-color: $color transparent transparent transparent;
        border-bottom: none;
    }
    @else if $direction == right {
        border-style: dashed dashed dashed solid;
        border-color: transparent transparent transparent $color;
        border-right: none;
    }
    @else if $direction == left {
        border-style: dashed solid dashed dashed;
        border-color: transparent $color transparent transparent;
        border-left: none;
    }
}

/*
 * 封装 inline-block
 */
@mixin inline-block($alignment: $inline-block-alignment) {
    display: inline-block;
    @if $alignment and $alignment != none {
        vertical-align: $alignment;
    }
    @if $legacy-support-for-ie {
        *vertical-align: auto;
        zoom: 1;
        *display: inline;
    }
}

/**
 *.仅浏览器隐藏，屏幕阅读器不被隐藏
 */
@mixin hidden {
    @if $legacy-support-for-ie {
        clip: rect(0,0,0,0);
    }
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;

    ////扩展了`.visuallyhidden`，充许`.focusable`元素通过键盘获取
    &.focusable:active,
    &.focusable:focus {
        clip: auto;
        height: auto;
        margin: 0;
        overflow: visible;
        position: static;
        width: auto;
    }
}
